name: 早盤推薦（09:00）

on:
  schedule:
    - cron: '0 1 * * 1-5'  # 台灣09:00 = UTC+8 → UTC 01:00
  workflow_dispatch:

jobs:
  run-morning:
    runs-on: ubuntu-latest
    timeout-minutes: 25  # 增加執行超時設定至25分鐘
    steps:
      - uses: actions/checkout@v4
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'
          
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          
      - name: Set timezone
        run: |
          echo "Setting timezone to Asia/Taipei"
          echo "TZ=Asia/Taipei" >> $GITHUB_ENV
          
      - name: Debug date
        run: |
          echo "Current time: $(date)"
          echo "Current day: $(date +%u)"  # 1=Mon, 7=Sun
          
      - name: Test network connection
        run: |
          echo "測試網絡連接..."
          # 使用 curl 比 ping 提供更多信息，而且 ping 可能會被防火牆阻擋
          curl -I https://finance.yahoo.com || echo "curl 失敗但繼續執行"
          curl -I https://mops.twse.com.tw || echo "curl 失敗但繼續執行"
          curl -I https://www.twse.com.tw || echo "curl 失敗但繼續執行"
      
      - name: Configure retry and timeout settings
        run: |
          # 設置更多環境變量來控制重試和超時
          echo "YAHOO_FINANCE_RETRY_ATTEMPTS=5" >> $GITHUB_ENV
          echo "YAHOO_FINANCE_BATCH_DELAY=5" >> $GITHUB_ENV
          echo "YAHOO_FINANCE_CONNECTION_TIMEOUT=10" >> $GITHUB_ENV
          echo "YAHOO_FINANCE_READ_TIMEOUT=15" >> $GITHUB_ENV
          
          echo "SCRAPER_MAX_RETRIES=3" >> $GITHUB_ENV
          echo "SCRAPER_CONNECTION_TIMEOUT=10" >> $GITHUB_ENV
          echo "SCRAPER_READ_TIMEOUT=15" >> $GITHUB_ENV
          echo "SCRAPER_BATCH_DELAY=2" >> $GITHUB_ENV
          
      - name: Clear cache if needed
        run: |
          python -c "
          import os, glob, time
          cache_dir = 'cache'
          if os.path.exists(cache_dir):
              files = glob.glob(os.path.join(cache_dir, '*.json'))
              now = time.time()
              week_ago = now - 7*24*60*60
              expired = [f for f in files if os.path.getmtime(f) < week_ago]
              for f in expired:
                  os.remove(f)
                  print(f'已刪除過期緩存：{os.path.basename(f)}')
          "
      
      - name: Run Morning Recommendations
        env:
          GOOGLE_JSON_KEY: ${{ secrets.GOOGLE_JSON_KEY }}
          FINMIND_TOKEN: ${{ secrets.FINMIND_TOKEN }}
          LINE_CHANNEL_ACCESS_TOKEN: ${{ secrets.LINE_CHANNEL_ACCESS_TOKEN }}
          LINE_USER_ID: ${{ secrets.LINE_USER_ID }}
          EMAIL_SENDER: ${{ secrets.EMAIL_SENDER }}
          EMAIL_PASSWORD: ${{ secrets.EMAIL_PASSWORD }}
          EMAIL_RECEIVER: ${{ secrets.EMAIL_RECEIVER }}
          TZ: "Asia/Taipei"  # 設置環境變量
        run: |
          # 使用多次重試機制執行主程序
          MAX_ATTEMPTS=3
          for i in $(seq 1 $MAX_ATTEMPTS); do
            echo "執行嘗試 $i/$MAX_ATTEMPTS..."
            if python main.py --mode=morning; then
              echo "成功完成早盤推薦！"
              exit 0
            else
              echo "嘗試 $i 失敗，退出碼: $?"
              if [ $i -lt $MAX_ATTEMPTS ]; then
                echo "等待 30 秒後重試..."
                sleep 30
              else
                echo "已達最大重試次數，放棄執行"
                exit 1
              fi
            fi
          done
