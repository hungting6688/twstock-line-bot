name: 早盤推薦（09:00）

on:
  schedule:
    - cron: '0 1 * * 1-5'  # 台灣09:00 = UTC+8 → UTC 01:00
  workflow_dispatch:

jobs:
  run-morning:
    runs-on: ubuntu-latest
    timeout-minutes: 30  # 增加執行超時設定至30分鐘
    steps:
      - uses: actions/checkout@v4
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'
          
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install requests[socks]  # 增加 SOCKS 代理支持
          
      - name: Set timezone
        run: |
          echo "Setting timezone to Asia/Taipei"
          echo "TZ=Asia/Taipei" >> $GITHUB_ENV
          
      - name: Debug date
        run: |
          echo "Current time: $(date)"
          echo "Current day: $(date +%u)"  # 1=Mon, 7=Sun
          
      - name: Test network connection
        run: |
          echo "測試網絡連接..."
          # 使用 curl 比 ping 提供更多信息
          curl -v -I https://finance.yahoo.com || echo "curl 失敗但繼續執行"
          curl -v -I https://mops.twse.com.tw || echo "curl 失敗但繼續執行"
          curl -v -I https://www.twse.com.tw || echo "curl 失敗但繼續執行"
      
      - name: Create logs directory
        run: mkdir -p logs
        
      - name: Configure retry and timeout settings
        run: |
          # 設置環境變量來控制重試和超時
          echo "YAHOO_FINANCE_RETRY_ATTEMPTS=3" >> $GITHUB_ENV
          echo "YAHOO_FINANCE_BATCH_DELAY=10" >> $GITHUB_ENV
          echo "YAHOO_FINANCE_CONNECTION_TIMEOUT=15" >> $GITHUB_ENV
          echo "YAHOO_FINANCE_READ_TIMEOUT=30" >> $GITHUB_ENV
          
          echo "SCRAPER_MAX_RETRIES=2" >> $GITHUB_ENV
          echo "SCRAPER_CONNECTION_TIMEOUT=15" >> $GITHUB_ENV
          echo "SCRAPER_READ_TIMEOUT=30" >> $GITHUB_ENV
          echo "SCRAPER_BATCH_DELAY=5" >> $GITHUB_ENV
          
      - name: Run Morning Recommendations
        env:
          GOOGLE_JSON_KEY: ${{ secrets.GOOGLE_JSON_KEY }}
          FINMIND_TOKEN: ${{ secrets.FINMIND_TOKEN }}
          LINE_CHANNEL_ACCESS_TOKEN: ${{ secrets.LINE_CHANNEL_ACCESS_TOKEN }}
          LINE_USER_ID: ${{ secrets.LINE_USER_ID }}
          EMAIL_SENDER: ${{ secrets.EMAIL_SENDER }}
          EMAIL_PASSWORD: ${{ secrets.EMAIL_PASSWORD }}
          EMAIL_RECEIVER: ${{ secrets.EMAIL_RECEIVER }}
          TZ: "Asia/Taipei"  # 設置環境變量
        run: |
          # 使用多次重試機制執行主程序
          MAX_ATTEMPTS=3
          for i in $(seq 1 $MAX_ATTEMPTS); do
            echo "執行嘗試 $i/$MAX_ATTEMPTS..."
            # 創建日誌檔名
            LOG_FILE="logs/morning_run_$(date +%Y%m%d_%H%M%S).log"
            # 執行並記錄輸出
            if python main.py --mode=morning 2>&1 | tee "$LOG_FILE"; then
              echo "成功完成早盤推薦！"
              exit 0
            else
              echo "嘗試 $i 失敗，退出碼: $?"
              if [ $i -lt $MAX_ATTEMPTS ]; then
                echo "等待 45 秒後重試..."
                sleep 45
              else
                echo "已達最大重試次數，放棄執行"
                # 嘗試發送錯誤通知
                python -c "from modules.notification.dual_notifier import send_notification; send_notification('早盤推薦執行失敗，請檢查系統日誌', '系統錯誤通知')"
                exit 1
              fi
            fi
          done
          
      - name: Archive logs
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: morning-logs
          path: logs/
          retention-days: 7
